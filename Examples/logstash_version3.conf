# =============================================================================
# VERSION 3: Deep Veeam Parsing - "Extracting Intelligence"
# =============================================================================
# File: logstash_version3.conf
# Purpose: Parse all Veeam-specific fields step by step

input {
  syslog {
    port => 5514
    type => "syslog"
  }
}

filter {
  # Keep all previous parsing
  grok {
    match => {
      "message" => "<%{POSINT:priority}>%{INT:version} %{TIMESTAMP_ISO8601:timestamp} %{IPORHOST:host} %{WORD:application} %{DATA:proc_id} %{DATA:msg_id} %{GREEDYDATA:raw_message}"
    }
    add_tag => ["parsed_syslog"]
    tag_on_failure => ["syslog_parse_failure"]
  }
  
  if [priority] {
    ruby {
      code => "
        priority = event.get('priority').to_i
        facility = priority >> 3
        severity = priority & 7
        event.set('facility', facility)
        event.set('severity_level', severity)
        severity_labels = ['Emergency', 'Alert', 'Critical', 'Error', 'Warning', 'Notice', 'Info', 'Debug']
        event.set('severity', severity_labels[severity] || 'Unknown')
      "
    }
  }
  
  # Application type detection
  if [application] == "OOTBI" {
    mutate { add_field => { "app_type" => "ootbi" } }
  }
  else if [application] =~ /(?i)veeam/ {
    mutate { add_field => { "app_type" => "veeam" } }
    
    # Parse Veeam fields step by step - easier to debug
    grok {
      match => { "raw_message" => "enterpriseId=\"%{DATA:enterprise_id}\"" }
      add_tag => ["veeam_enterprise_parsed"]
    }
    
    grok {
      match => { "raw_message" => "categoryId=%{INT:category_id}" }
      add_tag => ["veeam_category_parsed"]
    }
    
    grok {
      match => { "raw_message" => "instanceId=%{INT:instance_id}" }
      add_tag => ["veeam_instance_parsed"]
    }
    
    grok {
      match => { "raw_message" => "DetectionTimeUTC=\"%{DATA:detection_time_utc}\"" }
      add_tag => ["veeam_detection_time_parsed"]
    }
    
    grok {
      match => { "raw_message" => "OibID=\"%{DATA:oib_id}\"" }
      add_tag => ["veeam_oib_parsed"]
    }
    
    grok {
      match => { "raw_message" => "ActivityType=\"%{DATA:activity_type}\"" }
      add_tag => ["veeam_activity_parsed"]
    }
    
    grok {
      match => { "raw_message" => "UserName=\"%{DATA:username}\"" }
      add_tag => ["veeam_user_parsed"]
    }
    
    grok {
      match => { "raw_message" => "ObjectName=\"%{DATA:object_name}\"" }
      add_tag => ["veeam_object_parsed"]
    }
    
    grok {
      match => { "raw_message" => "VbrHostName=\"%{DATA:vbr_hostname}\"" }
      add_tag => ["veeam_vbr_parsed"]
    }
    
    grok {
      match => { "raw_message" => "Description=\"%{DATA:description}\"" }
      add_tag => ["veeam_description_parsed"]
    }
    
    # Parse domain\username format
    if [username] {
      grok {
        match => { "username" => "(?<user_domain>[^\\\\]+)\\\\(?<clean_username>.+)" }
        add_tag => ["username_split"]
      }
    }
    
    # Convert fields to proper types
    mutate {
      convert => { 
        "category_id" => "integer"
        "instance_id" => "integer" 
      }
    }
    
    # Parse detection timestamp
    if [detection_time_utc] {
      date {
        match => [ "detection_time_utc", "MM/dd/yyyy HH:mm:ss" ]
        target => "detection_timestamp"
      }
    }
  }
  else {
    mutate { add_field => { "app_type" => "unknown" } }
  }
}

output {
  # Elasticsearch disabled for this learning step
  # elasticsearch {
  #   hosts => ["elasticsearch:9200"]
  #   index => "syslog-%{+YYYY.MM.dd}"
  # }


  # Essential for learning - see what Logstash receives
  stdout { codec => rubydebug }
}
